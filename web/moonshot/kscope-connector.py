import kscope
import logging
import os
from typing import Any

from moonshot.src.connectors.connector import Connector, perform_retry
from moonshot.src.connectors_endpoints.connector_endpoint_arguments import (
    ConnectorEndpointArguments,
)

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class KscopeConnector(Connector):
    def __init__(self, ep_arguments: ConnectorEndpointArguments):
        print(f"[MRC] Initializing KscopeConnector...")
        print(f"[MRC] ep_arguments: {ep_arguments}")

        try:
            token = ep_arguments.token
            print(f"[MRC] JWT token: {token}")
            jwt_file = os.path.join(os.path.expanduser("~"), ".kaleidoscope.jwt")
            with open(jwt_file, "w") as file:
                file.write(token)
        except Exception as err:
            print(f"Error writing token: {err}")

        # Initialize super class
        super().__init__(ep_arguments)

        # Setup kscope client
        self._client = kscope.Client("llm.cluster.local", 4001)
        print(f"Client models: {self._client.models}")
        print(f"Client model instances: {self._client.model_instances}")
        """
        self._client = AsyncKscope(
            api_key=self.token,
            base_url=self.endpoint if self.endpoint and self.endpoint != "" else None,
        )
        """

        # Set the model to use and remove it from optional_params if it exists
        self.model = self.optional_params.get("model", "")

    @Connector.rate_limited
    @perform_retry
    async def get_response(self, prompt: str) -> str:
        """
        Asynchronously sends a prompt to the Kscope API and returns the generated response.

        This method constructs a request with the given prompt, optionally prepended and appended with
        predefined strings, and sends it to the Kscope API. If a system prompt is set, it is included in the
        request. The method then awaits the response from the API, processes it, and returns the resulting message
        content as a string.

        Args:
            prompt (str): The input prompt to send to the Kscope API.

        Returns:
            str: The text response generated by the Kscope model.
        """
        """
        connector_prompt = f"{self.pre_prompt}{prompt}{self.post_prompt}"
        if self.system_prompt:
            kscope_request = [
                {"role": "system", "content": self.system_prompt},
                {"role": "user", "content": connector_prompt},
            ]
        else:
            kscope_request = [{"role": "user", "content": connector_prompt}]

        # Merge self.optional_params with additional parameters
        new_params = {
            **self.optional_params,
            "model": self.model,
            "messages": kscope_request,
            "timeout": self.timeout,
        }
        response = await self._client.chat.completions.create(**new_params)
        return await self._process_response(response)
        """
        kscope_model = self._client.load_model("llama3-8b")
        response = kscope_model.generate(prompt)
        result_text = response.generation['sequences'][0]

        return result_text

    async def _process_response(self, response: Any) -> str:
        """
        Process the response from Kscope's API and return the message content as a string.

        This method processes the response received from Kscope's API call, specifically targeting
        the chat completion response structure. It extracts the message content from the first choice
        provided in the response, which is expected to contain the relevant information or answer.

        Args:
            response (Any): The response object received from an Kscope API call. It is expected to
            follow the structure of Kscope's chat completion response.

        Returns:
            str: A string containing the message content from the first choice in the response. This
            content represents the AI-generated text based on the input prompt.
        """
        return response.choices[0].message.content
